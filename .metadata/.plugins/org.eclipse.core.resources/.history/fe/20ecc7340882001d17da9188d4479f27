/*
 * stm32f407xx_gpio_driver.h
 *
 *  Created on: Dec 22, 2022
 *      Author: StefanoD
 */

#ifndef INC_STM32F407XX_GPIO_DRIVER_H_
#define INC_STM32F407XX_GPIO_DRIVER_H_

#include "stm32f407xx.h"

typedef struct {
	uint8_t GPIO_PinNumber;
	uint8_t GPIO_PinMode;
	uint8_t GPIO_PinSpeed;
	uint8_t GPIO_PinPuPdControl;
	uint8_t GPIO_PinOPType;
	uint8_t GPIO_PinAltFunMode;
} GPIO_PinCOnfig_t;

// Handle structure for a GPIO pin
typedef struct {
	GPIO_RegDef_t   *pGPIOx; // Base address of the GPIO port to which the pin belongs
	GPIO_PinCOnfig_t GPIO_PinCOnfig;
} GPIO_Handle_t;

// GPIO pin possible modes
#define GPIO_MODE_IN     0
#define GPIO_MODE_OUT    1
#define GPIO_MODE_ALTFN  2
#define GPIO_MODE_ANALOG 3
#define GPIO_MODE_IT_FT  4
#define GPIO_MODE_IT_RT  5
#define GPIO_MODE_IT_RFT 6

// GPIO pin output types
#define GPIO_OP_TYPE_PP 0
#define GPIO_OP_TYPE_OD 1

// GPIO pin output speeds
#define GPIO_SPEED_LOW    0
#define GPIO_SPEED_MEDIUM 1
#define GPIO_SPEED_FAST   2
#define GPIO_SPEED_HIGH   3

// GPIO pin pull up and pull down configurations
#define GPIO_NO_PUPD 0
#define GPIO_PU      1
#define GPIO_PD      2

// API supported by the driver

// Clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi);

// Initialization
void GPIO_Init  (GPIO_Handle_t *pGPIOHandle);
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx     );

// Data read and write
uint8_t  GPIO_ReadFromInputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber                );
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx                                   );
void     GPIO_WriteToOutputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t  Value);
void     GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint16_t Value);
void     GPIO_ToggleOutputPin  (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber                );

// IRQ configuration
void GPIO_IRQCOnfig (uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDI);
void GPIO_IRQHandlig(uint8_t PinNumber                                     );

#endif /* INC_STM32F407XX_GPIO_DRIVER_H_ */
