
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001274  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800141c  0800141c  0001141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001540  08001540  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001540  08001540  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001540  08001540  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000084  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ea5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000057d  00000000  00000000  00020f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000214c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  000216b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ca6  00000000  00000000  00021868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a6b  00000000  00000000  0002450e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000993b  00000000  00000000  00025f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f8b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d48  00000000  00000000  0002f904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001404 	.word	0x08001404

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001404 	.word	0x08001404

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <led_off+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <main>:

//semihosting init function 
extern void initialise_monitor_handles(void);

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002c4:	f000 f93c 	bl	8000540 <enable_processor_faults>
	
	initialise_monitor_handles();
 80002c8:	f000 fa98 	bl	80007fc <initialise_monitor_handles>

	init_scheduler_stack(SCHED_STACK_START);
 80002cc:	4809      	ldr	r0, [pc, #36]	; (80002f4 <main+0x34>)
 80002ce:	f000 f8a3 	bl	8000418 <init_scheduler_stack>

	printf("Implementation of simple task scheduler\n");
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0x38>)
 80002d4:	f000 fc06 	bl	8000ae4 <puts>

	init_tasks_stack();
 80002d8:	f000 f8a4 	bl	8000424 <init_tasks_stack>

	led_init_all();
 80002dc:	f7ff ff84 	bl	80001e8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e4:	f000 f862 	bl	80003ac <init_systick_timer>

	switch_sp_to_psp();
 80002e8:	f000 f9b6 	bl	8000658 <switch_sp_to_psp>

	task1_handler();
 80002ec:	f000 f80a 	bl	8000304 <task1_handler>

	for(;;);
 80002f0:	e7fe      	b.n	80002f0 <main+0x30>
 80002f2:	bf00      	nop
 80002f4:	2001ec00 	.word	0x2001ec00
 80002f8:	0800141c 	.word	0x0800141c

080002fc <idle_task>:
}


void idle_task(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	while(1);
 8000300:	e7fe      	b.n	8000300 <idle_task+0x4>
	...

08000304 <task1_handler>:
}


void task1_handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task1 is executing\n");
 8000308:	4808      	ldr	r0, [pc, #32]	; (800032c <task1_handler+0x28>)
 800030a:	f000 fbeb 	bl	8000ae4 <puts>
		led_on(LED_GREEN);
 800030e:	200c      	movs	r0, #12
 8000310:	f7ff ffa4 	bl	800025c <led_on>
		task_delay(1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000318:	f000 f9c0 	bl	800069c <task_delay>
		led_off(LED_GREEN);
 800031c:	200c      	movs	r0, #12
 800031e:	f7ff ffb5 	bl	800028c <led_off>
		task_delay(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f000 f9b9 	bl	800069c <task_delay>
		printf("Task1 is executing\n");
 800032a:	e7ed      	b.n	8000308 <task1_handler+0x4>
 800032c:	08001444 	.word	0x08001444

08000330 <task2_handler>:
	}

}

void task2_handler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task2 is executing\n");
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <task2_handler+0x28>)
 8000336:	f000 fbd5 	bl	8000ae4 <puts>
		led_on(LED_ORANGE);
 800033a:	200d      	movs	r0, #13
 800033c:	f7ff ff8e 	bl	800025c <led_on>
		task_delay(1000);
 8000340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000344:	f000 f9aa 	bl	800069c <task_delay>
		led_off(LED_ORANGE);
 8000348:	200d      	movs	r0, #13
 800034a:	f7ff ff9f 	bl	800028c <led_off>
		task_delay(1000);
 800034e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000352:	f000 f9a3 	bl	800069c <task_delay>
		printf("Task2 is executing\n");
 8000356:	e7ed      	b.n	8000334 <task2_handler+0x4>
 8000358:	08001458 	.word	0x08001458

0800035c <task3_handler>:
	}

}

void task3_handler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task3 is executing\n");
 8000360:	4807      	ldr	r0, [pc, #28]	; (8000380 <task3_handler+0x24>)
 8000362:	f000 fbbf 	bl	8000ae4 <puts>
		led_on(LED_BLUE);
 8000366:	200f      	movs	r0, #15
 8000368:	f7ff ff78 	bl	800025c <led_on>
		task_delay(250);
 800036c:	20fa      	movs	r0, #250	; 0xfa
 800036e:	f000 f995 	bl	800069c <task_delay>
		led_off(LED_BLUE);
 8000372:	200f      	movs	r0, #15
 8000374:	f7ff ff8a 	bl	800028c <led_off>
		task_delay(250);
 8000378:	20fa      	movs	r0, #250	; 0xfa
 800037a:	f000 f98f 	bl	800069c <task_delay>
		printf("Task3 is executing\n");
 800037e:	e7ef      	b.n	8000360 <task3_handler+0x4>
 8000380:	0800146c 	.word	0x0800146c

08000384 <task4_handler>:

}

void task4_handler(void)

{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task4 is executing\n");
 8000388:	4807      	ldr	r0, [pc, #28]	; (80003a8 <task4_handler+0x24>)
 800038a:	f000 fbab 	bl	8000ae4 <puts>
		led_on(LED_RED);
 800038e:	200e      	movs	r0, #14
 8000390:	f7ff ff64 	bl	800025c <led_on>
		task_delay(125);
 8000394:	207d      	movs	r0, #125	; 0x7d
 8000396:	f000 f981 	bl	800069c <task_delay>
		led_off(LED_RED);
 800039a:	200e      	movs	r0, #14
 800039c:	f7ff ff76 	bl	800028c <led_off>
		task_delay(125);
 80003a0:	207d      	movs	r0, #125	; 0x7d
 80003a2:	f000 f97b 	bl	800069c <task_delay>
		printf("Task4 is executing\n");
 80003a6:	e7ef      	b.n	8000388 <task4_handler+0x4>
 80003a8:	08001480 	.word	0x08001480

080003ac <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <init_systick_timer+0x60>)
 80003b6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003b8:	4b15      	ldr	r3, [pc, #84]	; (8000410 <init_systick_timer+0x64>)
 80003ba:	613b      	str	r3, [r7, #16]

    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80003bc:	4a15      	ldr	r2, [pc, #84]	; (8000414 <init_systick_timer+0x68>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c4:	3b01      	subs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	431a      	orrs	r2, r3
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0202 	orr.w	r2, r3, #2
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0204 	orr.w	r2, r3, #4
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	601a      	str	r2, [r3, #0]

}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000e014 	.word	0xe000e014
 8000410:	e000e010 	.word	0xe000e010
 8000414:	00f42400 	.word	0x00f42400

08000418 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000418:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800041a:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 800041e:	4770      	bx	lr

}
 8000420:	bf00      	nop
	...

08000424 <init_tasks_stack>:




void init_tasks_stack(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 800042a:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <init_tasks_stack+0xf0>)
 800042c:	2200      	movs	r2, #0
 800042e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000430:	4b38      	ldr	r3, [pc, #224]	; (8000514 <init_tasks_stack+0xf0>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <init_tasks_stack+0xf0>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800043e:	4b35      	ldr	r3, [pc, #212]	; (8000514 <init_tasks_stack+0xf0>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000446:	4b33      	ldr	r3, [pc, #204]	; (8000514 <init_tasks_stack+0xf0>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 800044e:	4b31      	ldr	r3, [pc, #196]	; (8000514 <init_tasks_stack+0xf0>)
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <init_tasks_stack+0xf4>)
 8000452:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <init_tasks_stack+0xf0>)
 8000456:	4a31      	ldr	r2, [pc, #196]	; (800051c <init_tasks_stack+0xf8>)
 8000458:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <init_tasks_stack+0xf0>)
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <init_tasks_stack+0xfc>)
 800045e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <init_tasks_stack+0xf0>)
 8000462:	4a30      	ldr	r2, [pc, #192]	; (8000524 <init_tasks_stack+0x100>)
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <init_tasks_stack+0xf0>)
 8000468:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <init_tasks_stack+0x104>)
 800046a:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <init_tasks_stack+0xf0>)
 800046e:	4a2f      	ldr	r2, [pc, #188]	; (800052c <init_tasks_stack+0x108>)
 8000470:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <init_tasks_stack+0xf0>)
 8000474:	4a2e      	ldr	r2, [pc, #184]	; (8000530 <init_tasks_stack+0x10c>)
 8000476:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <init_tasks_stack+0xf0>)
 800047a:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <init_tasks_stack+0x110>)
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <init_tasks_stack+0xf0>)
 8000480:	4a2d      	ldr	r2, [pc, #180]	; (8000538 <init_tasks_stack+0x114>)
 8000482:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <init_tasks_stack+0xf0>)
 8000486:	4a2d      	ldr	r2, [pc, #180]	; (800053c <init_tasks_stack+0x118>)
 8000488:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	e037      	b.n	8000500 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000490:	4a20      	ldr	r2, [pc, #128]	; (8000514 <init_tasks_stack+0xf0>)
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	011b      	lsls	r3, r3, #4
 8000496:	4413      	add	r3, r2
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3b04      	subs	r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x00100000
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a8:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80004b0:	4a18      	ldr	r2, [pc, #96]	; (8000514 <init_tasks_stack+0xf0>)
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	011b      	lsls	r3, r3, #4
 80004b6:	4413      	add	r3, r2
 80004b8:	330c      	adds	r3, #12
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]


		pPSP--; //LR
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f06f 0202 	mvn.w	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	e008      	b.n	80004e8 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3b04      	subs	r3, #4
 80004da:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	3301      	adds	r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	ddf3      	ble.n	80004d6 <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	4908      	ldr	r1, [pc, #32]	; (8000514 <init_tasks_stack+0xf0>)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	440b      	add	r3, r1
 80004f8:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	3301      	adds	r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	2b04      	cmp	r3, #4
 8000504:	ddc4      	ble.n	8000490 <init_tasks_stack+0x6c>


	}

}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	20000088 	.word	0x20000088
 8000518:	2001f000 	.word	0x2001f000
 800051c:	20020000 	.word	0x20020000
 8000520:	2001fc00 	.word	0x2001fc00
 8000524:	2001f800 	.word	0x2001f800
 8000528:	2001f400 	.word	0x2001f400
 800052c:	080002fd 	.word	0x080002fd
 8000530:	08000305 	.word	0x08000305
 8000534:	08000331 	.word	0x08000331
 8000538:	0800035d 	.word	0x0800035d
 800053c:	08000385 	.word	0x08000385

08000540 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <enable_processor_faults+0x3c>)
 8000548:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed24 	.word	0xe000ed24

08000580 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <get_psp_value+0x1c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <get_psp_value+0x20>)
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000088 	.word	0x20000088

080005a4 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <save_psp_value+0x24>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <save_psp_value+0x28>)
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	4413      	add	r3, r2
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000088 	.word	0x20000088

080005d0 <update_next_task>:


void update_next_task(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	e024      	b.n	800062a <update_next_task+0x5a>
	{
		current_task++;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <update_next_task+0x7c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <update_next_task+0x7c>)
 80005ea:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <update_next_task+0x7c>)
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <update_next_task+0x80>)
 80005f2:	fba3 1302 	umull	r1, r3, r3, r2
 80005f6:	0899      	lsrs	r1, r3, #2
 80005f8:	460b      	mov	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <update_next_task+0x7c>)
 8000604:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <update_next_task+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <update_next_task+0x84>)
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	3308      	adds	r3, #8
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d103      	bne.n	8000624 <update_next_task+0x54>
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <update_next_task+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d106      	bne.n	8000632 <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	ddd7      	ble.n	80005e0 <update_next_task+0x10>
 8000630:	e000      	b.n	8000634 <update_next_task+0x64>
			break;
 8000632:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <update_next_task+0x70>
		current_task = 0;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <update_next_task+0x7c>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000
 8000650:	cccccccd 	.word	0xcccccccd
 8000654:	20000088 	.word	0x20000088

08000658 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000658:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800065a:	f7ff ff91 	bl	8000580 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800065e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 8000662:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000666:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800066a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800066e:	4770      	bx	lr
}
 8000670:	bf00      	nop
	...

08000674 <schedule>:


void schedule(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
	//pend the pendsv exception
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <schedule+0x24>)
 800067c:	607b      	str	r3, [r7, #4]
	*pICSR |= ( 1 << 28);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed04 	.word	0xe000ed04

0800069c <task_delay>:




void task_delay(uint32_t tick_count)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 80006a4:	f04f 0001 	mov.w	r0, #1
 80006a8:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <task_delay+0x54>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d015      	beq.n	80006e0 <task_delay+0x44>
	{
	   user_tasks[current_task].block_count = g_tick_count + tick_count;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <task_delay+0x58>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <task_delay+0x54>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	441a      	add	r2, r3
 80006c2:	490d      	ldr	r1, [pc, #52]	; (80006f8 <task_delay+0x5c>)
 80006c4:	0103      	lsls	r3, r0, #4
 80006c6:	440b      	add	r3, r1
 80006c8:	3304      	adds	r3, #4
 80006ca:	601a      	str	r2, [r3, #0]
	   user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <task_delay+0x54>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <task_delay+0x5c>)
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	4413      	add	r3, r2
 80006d6:	3308      	adds	r3, #8
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	701a      	strb	r2, [r3, #0]
	   schedule();
 80006dc:	f7ff ffca 	bl	8000674 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 80006e0:	f04f 0000 	mov.w	r0, #0
 80006e4:	f380 8810 	msr	PRIMASK, r0
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000084 	.word	0x20000084
 80006f8:	20000088 	.word	0x20000088

080006fc <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80006fc:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000700:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000704:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000706:	f7ff ff4d 	bl	80005a4 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 800070a:	f7ff ff61 	bl	80005d0 <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 800070e:	f7ff ff37 	bl	8000580 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000716:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800071a:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800071e:	4770      	bx	lr



}
 8000720:	bf00      	nop
	...

08000724 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <update_global_tick_count+0x18>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a03      	ldr	r2, [pc, #12]	; (800073c <update_global_tick_count+0x18>)
 8000730:	6013      	str	r3, [r2, #0]
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	20000084 	.word	0x20000084

08000740 <unblock_tasks>:

void unblock_tasks(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e01b      	b.n	8000784 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <unblock_tasks+0x58>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	4413      	add	r3, r2
 8000754:	3308      	adds	r3, #8
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d010      	beq.n	800077e <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <unblock_tasks+0x58>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4413      	add	r3, r2
 8000764:	3304      	adds	r3, #4
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <unblock_tasks+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d106      	bne.n	800077e <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <unblock_tasks+0x58>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	4413      	add	r3, r2
 8000778:	3308      	adds	r3, #8
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b04      	cmp	r3, #4
 8000788:	dde0      	ble.n	800074c <unblock_tasks+0xc>
			}
		}

	}

}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000088 	.word	0x20000088
 800079c:	20000084 	.word	0x20000084

080007a0 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <SysTick_Handler+0x28>)
 80007a8:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 80007aa:	f7ff ffbb 	bl	8000724 <update_global_tick_count>

    unblock_tasks();
 80007ae:	f7ff ffc7 	bl	8000740 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <HardFault_Handler+0xc>)
 80007d2:	f000 f987 	bl	8000ae4 <puts>
	while(1);
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0xa>
 80007d8:	08001494 	.word	0x08001494

080007dc <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80007e0:	4801      	ldr	r0, [pc, #4]	; (80007e8 <MemManage_Handler+0xc>)
 80007e2:	f000 f97f 	bl	8000ae4 <puts>
	while(1);
 80007e6:	e7fe      	b.n	80007e6 <MemManage_Handler+0xa>
 80007e8:	080014ac 	.word	0x080014ac

080007ec <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <BusFault_Handler+0xc>)
 80007f2:	f000 f977 	bl	8000ae4 <puts>
	while(1);
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0xa>
 80007f8:	080014c4 	.word	0x080014c4

080007fc <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b086      	sub	sp, #24
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	e00a      	b.n	8000832 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800081c:	f3af 8000 	nop.w
 8000820:	4601      	mov	r1, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	60ba      	str	r2, [r7, #8]
 8000828:	b2ca      	uxtb	r2, r1
 800082a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	3301      	adds	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697a      	ldr	r2, [r7, #20]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	429a      	cmp	r2, r3
 8000838:	dbf0      	blt.n	800081c <_read+0x12>
	}

return len;
 800083a:	687b      	ldr	r3, [r7, #4]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e009      	b.n	800086a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	60ba      	str	r2, [r7, #8]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3301      	adds	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	dbf1      	blt.n	8000856 <_write+0x12>
	}
	return len;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_close>:

int _close(int file)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	return -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a4:	605a      	str	r2, [r3, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <_isatty>:

int _isatty(int file)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	return 1;
 80008bc:	2301      	movs	r3, #1
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
	return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f000 f846 	bl	80009a4 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20020000 	.word	0x20020000
 8000944:	00000400 	.word	0x00000400
 8000948:	200000d8 	.word	0x200000d8
 800094c:	200000f0 	.word	0x200000f0

08000950 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097e:	f000 f817 	bl	80009b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fc9d 	bl	80002c0 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000994:	08001548 	.word	0x08001548
  ldr r2, =_sbss
 8000998:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800099c:	200000ec 	.word	0x200000ec

080009a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <__errno>:
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <__errno+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000004 	.word	0x20000004

080009b0 <__libc_init_array>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4d0d      	ldr	r5, [pc, #52]	; (80009e8 <__libc_init_array+0x38>)
 80009b4:	4c0d      	ldr	r4, [pc, #52]	; (80009ec <__libc_init_array+0x3c>)
 80009b6:	1b64      	subs	r4, r4, r5
 80009b8:	10a4      	asrs	r4, r4, #2
 80009ba:	2600      	movs	r6, #0
 80009bc:	42a6      	cmp	r6, r4
 80009be:	d109      	bne.n	80009d4 <__libc_init_array+0x24>
 80009c0:	4d0b      	ldr	r5, [pc, #44]	; (80009f0 <__libc_init_array+0x40>)
 80009c2:	4c0c      	ldr	r4, [pc, #48]	; (80009f4 <__libc_init_array+0x44>)
 80009c4:	f000 fd1e 	bl	8001404 <_init>
 80009c8:	1b64      	subs	r4, r4, r5
 80009ca:	10a4      	asrs	r4, r4, #2
 80009cc:	2600      	movs	r6, #0
 80009ce:	42a6      	cmp	r6, r4
 80009d0:	d105      	bne.n	80009de <__libc_init_array+0x2e>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d8:	4798      	blx	r3
 80009da:	3601      	adds	r6, #1
 80009dc:	e7ee      	b.n	80009bc <__libc_init_array+0xc>
 80009de:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e2:	4798      	blx	r3
 80009e4:	3601      	adds	r6, #1
 80009e6:	e7f2      	b.n	80009ce <__libc_init_array+0x1e>
 80009e8:	08001540 	.word	0x08001540
 80009ec:	08001540 	.word	0x08001540
 80009f0:	08001540 	.word	0x08001540
 80009f4:	08001544 	.word	0x08001544

080009f8 <memset>:
 80009f8:	4402      	add	r2, r0
 80009fa:	4603      	mov	r3, r0
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d100      	bne.n	8000a02 <memset+0xa>
 8000a00:	4770      	bx	lr
 8000a02:	f803 1b01 	strb.w	r1, [r3], #1
 8000a06:	e7f9      	b.n	80009fc <memset+0x4>

08000a08 <_puts_r>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	460e      	mov	r6, r1
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	b118      	cbz	r0, 8000a18 <_puts_r+0x10>
 8000a10:	6983      	ldr	r3, [r0, #24]
 8000a12:	b90b      	cbnz	r3, 8000a18 <_puts_r+0x10>
 8000a14:	f000 fa48 	bl	8000ea8 <__sinit>
 8000a18:	69ab      	ldr	r3, [r5, #24]
 8000a1a:	68ac      	ldr	r4, [r5, #8]
 8000a1c:	b913      	cbnz	r3, 8000a24 <_puts_r+0x1c>
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f000 fa42 	bl	8000ea8 <__sinit>
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <_puts_r+0xd0>)
 8000a26:	429c      	cmp	r4, r3
 8000a28:	d120      	bne.n	8000a6c <_puts_r+0x64>
 8000a2a:	686c      	ldr	r4, [r5, #4]
 8000a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a2e:	07db      	lsls	r3, r3, #31
 8000a30:	d405      	bmi.n	8000a3e <_puts_r+0x36>
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	0598      	lsls	r0, r3, #22
 8000a36:	d402      	bmi.n	8000a3e <_puts_r+0x36>
 8000a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a3a:	f000 fad3 	bl	8000fe4 <__retarget_lock_acquire_recursive>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	0719      	lsls	r1, r3, #28
 8000a42:	d51d      	bpl.n	8000a80 <_puts_r+0x78>
 8000a44:	6923      	ldr	r3, [r4, #16]
 8000a46:	b1db      	cbz	r3, 8000a80 <_puts_r+0x78>
 8000a48:	3e01      	subs	r6, #1
 8000a4a:	68a3      	ldr	r3, [r4, #8]
 8000a4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60a3      	str	r3, [r4, #8]
 8000a54:	bb39      	cbnz	r1, 8000aa6 <_puts_r+0x9e>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da38      	bge.n	8000acc <_puts_r+0xc4>
 8000a5a:	4622      	mov	r2, r4
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 f848 	bl	8000af4 <__swbuf_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d011      	beq.n	8000a8c <_puts_r+0x84>
 8000a68:	250a      	movs	r5, #10
 8000a6a:	e011      	b.n	8000a90 <_puts_r+0x88>
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <_puts_r+0xd4>)
 8000a6e:	429c      	cmp	r4, r3
 8000a70:	d101      	bne.n	8000a76 <_puts_r+0x6e>
 8000a72:	68ac      	ldr	r4, [r5, #8]
 8000a74:	e7da      	b.n	8000a2c <_puts_r+0x24>
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <_puts_r+0xd8>)
 8000a78:	429c      	cmp	r4, r3
 8000a7a:	bf08      	it	eq
 8000a7c:	68ec      	ldreq	r4, [r5, #12]
 8000a7e:	e7d5      	b.n	8000a2c <_puts_r+0x24>
 8000a80:	4621      	mov	r1, r4
 8000a82:	4628      	mov	r0, r5
 8000a84:	f000 f888 	bl	8000b98 <__swsetup_r>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d0dd      	beq.n	8000a48 <_puts_r+0x40>
 8000a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a92:	07da      	lsls	r2, r3, #31
 8000a94:	d405      	bmi.n	8000aa2 <_puts_r+0x9a>
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	059b      	lsls	r3, r3, #22
 8000a9a:	d402      	bmi.n	8000aa2 <_puts_r+0x9a>
 8000a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a9e:	f000 faa2 	bl	8000fe6 <__retarget_lock_release_recursive>
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da04      	bge.n	8000ab4 <_puts_r+0xac>
 8000aaa:	69a2      	ldr	r2, [r4, #24]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dc06      	bgt.n	8000abe <_puts_r+0xb6>
 8000ab0:	290a      	cmp	r1, #10
 8000ab2:	d004      	beq.n	8000abe <_puts_r+0xb6>
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	6022      	str	r2, [r4, #0]
 8000aba:	7019      	strb	r1, [r3, #0]
 8000abc:	e7c5      	b.n	8000a4a <_puts_r+0x42>
 8000abe:	4622      	mov	r2, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 f817 	bl	8000af4 <__swbuf_r>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	d1bf      	bne.n	8000a4a <_puts_r+0x42>
 8000aca:	e7df      	b.n	8000a8c <_puts_r+0x84>
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	250a      	movs	r5, #10
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	6022      	str	r2, [r4, #0]
 8000ad4:	701d      	strb	r5, [r3, #0]
 8000ad6:	e7db      	b.n	8000a90 <_puts_r+0x88>
 8000ad8:	08001500 	.word	0x08001500
 8000adc:	08001520 	.word	0x08001520
 8000ae0:	080014e0 	.word	0x080014e0

08000ae4 <puts>:
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <puts+0xc>)
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f7ff bf8d 	b.w	8000a08 <_puts_r>
 8000aee:	bf00      	nop
 8000af0:	20000004 	.word	0x20000004

08000af4 <__swbuf_r>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	460e      	mov	r6, r1
 8000af8:	4614      	mov	r4, r2
 8000afa:	4605      	mov	r5, r0
 8000afc:	b118      	cbz	r0, 8000b06 <__swbuf_r+0x12>
 8000afe:	6983      	ldr	r3, [r0, #24]
 8000b00:	b90b      	cbnz	r3, 8000b06 <__swbuf_r+0x12>
 8000b02:	f000 f9d1 	bl	8000ea8 <__sinit>
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <__swbuf_r+0x98>)
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d12b      	bne.n	8000b64 <__swbuf_r+0x70>
 8000b0c:	686c      	ldr	r4, [r5, #4]
 8000b0e:	69a3      	ldr	r3, [r4, #24]
 8000b10:	60a3      	str	r3, [r4, #8]
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	071a      	lsls	r2, r3, #28
 8000b16:	d52f      	bpl.n	8000b78 <__swbuf_r+0x84>
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	b36b      	cbz	r3, 8000b78 <__swbuf_r+0x84>
 8000b1c:	6923      	ldr	r3, [r4, #16]
 8000b1e:	6820      	ldr	r0, [r4, #0]
 8000b20:	1ac0      	subs	r0, r0, r3
 8000b22:	6963      	ldr	r3, [r4, #20]
 8000b24:	b2f6      	uxtb	r6, r6
 8000b26:	4283      	cmp	r3, r0
 8000b28:	4637      	mov	r7, r6
 8000b2a:	dc04      	bgt.n	8000b36 <__swbuf_r+0x42>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f926 	bl	8000d80 <_fflush_r>
 8000b34:	bb30      	cbnz	r0, 8000b84 <__swbuf_r+0x90>
 8000b36:	68a3      	ldr	r3, [r4, #8]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	60a3      	str	r3, [r4, #8]
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	6022      	str	r2, [r4, #0]
 8000b42:	701e      	strb	r6, [r3, #0]
 8000b44:	6963      	ldr	r3, [r4, #20]
 8000b46:	3001      	adds	r0, #1
 8000b48:	4283      	cmp	r3, r0
 8000b4a:	d004      	beq.n	8000b56 <__swbuf_r+0x62>
 8000b4c:	89a3      	ldrh	r3, [r4, #12]
 8000b4e:	07db      	lsls	r3, r3, #31
 8000b50:	d506      	bpl.n	8000b60 <__swbuf_r+0x6c>
 8000b52:	2e0a      	cmp	r6, #10
 8000b54:	d104      	bne.n	8000b60 <__swbuf_r+0x6c>
 8000b56:	4621      	mov	r1, r4
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f000 f911 	bl	8000d80 <_fflush_r>
 8000b5e:	b988      	cbnz	r0, 8000b84 <__swbuf_r+0x90>
 8000b60:	4638      	mov	r0, r7
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <__swbuf_r+0x9c>)
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d101      	bne.n	8000b6e <__swbuf_r+0x7a>
 8000b6a:	68ac      	ldr	r4, [r5, #8]
 8000b6c:	e7cf      	b.n	8000b0e <__swbuf_r+0x1a>
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <__swbuf_r+0xa0>)
 8000b70:	429c      	cmp	r4, r3
 8000b72:	bf08      	it	eq
 8000b74:	68ec      	ldreq	r4, [r5, #12]
 8000b76:	e7ca      	b.n	8000b0e <__swbuf_r+0x1a>
 8000b78:	4621      	mov	r1, r4
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 f80c 	bl	8000b98 <__swsetup_r>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0cb      	beq.n	8000b1c <__swbuf_r+0x28>
 8000b84:	f04f 37ff 	mov.w	r7, #4294967295
 8000b88:	e7ea      	b.n	8000b60 <__swbuf_r+0x6c>
 8000b8a:	bf00      	nop
 8000b8c:	08001500 	.word	0x08001500
 8000b90:	08001520 	.word	0x08001520
 8000b94:	080014e0 	.word	0x080014e0

08000b98 <__swsetup_r>:
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <__swsetup_r+0xcc>)
 8000b9a:	b570      	push	{r4, r5, r6, lr}
 8000b9c:	681d      	ldr	r5, [r3, #0]
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	b125      	cbz	r5, 8000bae <__swsetup_r+0x16>
 8000ba4:	69ab      	ldr	r3, [r5, #24]
 8000ba6:	b913      	cbnz	r3, 8000bae <__swsetup_r+0x16>
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f000 f97d 	bl	8000ea8 <__sinit>
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <__swsetup_r+0xd0>)
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	d10f      	bne.n	8000bd4 <__swsetup_r+0x3c>
 8000bb4:	686c      	ldr	r4, [r5, #4]
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bbc:	0719      	lsls	r1, r3, #28
 8000bbe:	d42c      	bmi.n	8000c1a <__swsetup_r+0x82>
 8000bc0:	06dd      	lsls	r5, r3, #27
 8000bc2:	d411      	bmi.n	8000be8 <__swsetup_r+0x50>
 8000bc4:	2309      	movs	r3, #9
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	e03e      	b.n	8000c52 <__swsetup_r+0xba>
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <__swsetup_r+0xd4>)
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	d101      	bne.n	8000bde <__swsetup_r+0x46>
 8000bda:	68ac      	ldr	r4, [r5, #8]
 8000bdc:	e7eb      	b.n	8000bb6 <__swsetup_r+0x1e>
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <__swsetup_r+0xd8>)
 8000be0:	429c      	cmp	r4, r3
 8000be2:	bf08      	it	eq
 8000be4:	68ec      	ldreq	r4, [r5, #12]
 8000be6:	e7e6      	b.n	8000bb6 <__swsetup_r+0x1e>
 8000be8:	0758      	lsls	r0, r3, #29
 8000bea:	d512      	bpl.n	8000c12 <__swsetup_r+0x7a>
 8000bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bee:	b141      	cbz	r1, 8000c02 <__swsetup_r+0x6a>
 8000bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d002      	beq.n	8000bfe <__swsetup_r+0x66>
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f000 fa5b 	bl	80010b4 <_free_r>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	6363      	str	r3, [r4, #52]	; 0x34
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6063      	str	r3, [r4, #4]
 8000c0e:	6923      	ldr	r3, [r4, #16]
 8000c10:	6023      	str	r3, [r4, #0]
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	81a3      	strh	r3, [r4, #12]
 8000c1a:	6923      	ldr	r3, [r4, #16]
 8000c1c:	b94b      	cbnz	r3, 8000c32 <__swsetup_r+0x9a>
 8000c1e:	89a3      	ldrh	r3, [r4, #12]
 8000c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c28:	d003      	beq.n	8000c32 <__swsetup_r+0x9a>
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	4630      	mov	r0, r6
 8000c2e:	f000 fa01 	bl	8001034 <__smakebuf_r>
 8000c32:	89a0      	ldrh	r0, [r4, #12]
 8000c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c38:	f010 0301 	ands.w	r3, r0, #1
 8000c3c:	d00a      	beq.n	8000c54 <__swsetup_r+0xbc>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60a3      	str	r3, [r4, #8]
 8000c42:	6963      	ldr	r3, [r4, #20]
 8000c44:	425b      	negs	r3, r3
 8000c46:	61a3      	str	r3, [r4, #24]
 8000c48:	6923      	ldr	r3, [r4, #16]
 8000c4a:	b943      	cbnz	r3, 8000c5e <__swsetup_r+0xc6>
 8000c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c50:	d1ba      	bne.n	8000bc8 <__swsetup_r+0x30>
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	0781      	lsls	r1, r0, #30
 8000c56:	bf58      	it	pl
 8000c58:	6963      	ldrpl	r3, [r4, #20]
 8000c5a:	60a3      	str	r3, [r4, #8]
 8000c5c:	e7f4      	b.n	8000c48 <__swsetup_r+0xb0>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e7f7      	b.n	8000c52 <__swsetup_r+0xba>
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004
 8000c68:	08001500 	.word	0x08001500
 8000c6c:	08001520 	.word	0x08001520
 8000c70:	080014e0 	.word	0x080014e0

08000c74 <__sflush_r>:
 8000c74:	898a      	ldrh	r2, [r1, #12]
 8000c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	0710      	lsls	r0, r2, #28
 8000c7e:	460c      	mov	r4, r1
 8000c80:	d458      	bmi.n	8000d34 <__sflush_r+0xc0>
 8000c82:	684b      	ldr	r3, [r1, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dc05      	bgt.n	8000c94 <__sflush_r+0x20>
 8000c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	dc02      	bgt.n	8000c94 <__sflush_r+0x20>
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0f9      	beq.n	8000c8e <__sflush_r+0x1a>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ca0:	682f      	ldr	r7, [r5, #0]
 8000ca2:	602b      	str	r3, [r5, #0]
 8000ca4:	d032      	beq.n	8000d0c <__sflush_r+0x98>
 8000ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ca8:	89a3      	ldrh	r3, [r4, #12]
 8000caa:	075a      	lsls	r2, r3, #29
 8000cac:	d505      	bpl.n	8000cba <__sflush_r+0x46>
 8000cae:	6863      	ldr	r3, [r4, #4]
 8000cb0:	1ac0      	subs	r0, r0, r3
 8000cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cb4:	b10b      	cbz	r3, 8000cba <__sflush_r+0x46>
 8000cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cb8:	1ac0      	subs	r0, r0, r3
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cc0:	6a21      	ldr	r1, [r4, #32]
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	47b0      	blx	r6
 8000cc6:	1c43      	adds	r3, r0, #1
 8000cc8:	89a3      	ldrh	r3, [r4, #12]
 8000cca:	d106      	bne.n	8000cda <__sflush_r+0x66>
 8000ccc:	6829      	ldr	r1, [r5, #0]
 8000cce:	291d      	cmp	r1, #29
 8000cd0:	d82c      	bhi.n	8000d2c <__sflush_r+0xb8>
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <__sflush_r+0x108>)
 8000cd4:	40ca      	lsrs	r2, r1
 8000cd6:	07d6      	lsls	r6, r2, #31
 8000cd8:	d528      	bpl.n	8000d2c <__sflush_r+0xb8>
 8000cda:	2200      	movs	r2, #0
 8000cdc:	6062      	str	r2, [r4, #4]
 8000cde:	04d9      	lsls	r1, r3, #19
 8000ce0:	6922      	ldr	r2, [r4, #16]
 8000ce2:	6022      	str	r2, [r4, #0]
 8000ce4:	d504      	bpl.n	8000cf0 <__sflush_r+0x7c>
 8000ce6:	1c42      	adds	r2, r0, #1
 8000ce8:	d101      	bne.n	8000cee <__sflush_r+0x7a>
 8000cea:	682b      	ldr	r3, [r5, #0]
 8000cec:	b903      	cbnz	r3, 8000cf0 <__sflush_r+0x7c>
 8000cee:	6560      	str	r0, [r4, #84]	; 0x54
 8000cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cf2:	602f      	str	r7, [r5, #0]
 8000cf4:	2900      	cmp	r1, #0
 8000cf6:	d0ca      	beq.n	8000c8e <__sflush_r+0x1a>
 8000cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d002      	beq.n	8000d06 <__sflush_r+0x92>
 8000d00:	4628      	mov	r0, r5
 8000d02:	f000 f9d7 	bl	80010b4 <_free_r>
 8000d06:	2000      	movs	r0, #0
 8000d08:	6360      	str	r0, [r4, #52]	; 0x34
 8000d0a:	e7c1      	b.n	8000c90 <__sflush_r+0x1c>
 8000d0c:	6a21      	ldr	r1, [r4, #32]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4628      	mov	r0, r5
 8000d12:	47b0      	blx	r6
 8000d14:	1c41      	adds	r1, r0, #1
 8000d16:	d1c7      	bne.n	8000ca8 <__sflush_r+0x34>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0c4      	beq.n	8000ca8 <__sflush_r+0x34>
 8000d1e:	2b1d      	cmp	r3, #29
 8000d20:	d001      	beq.n	8000d26 <__sflush_r+0xb2>
 8000d22:	2b16      	cmp	r3, #22
 8000d24:	d101      	bne.n	8000d2a <__sflush_r+0xb6>
 8000d26:	602f      	str	r7, [r5, #0]
 8000d28:	e7b1      	b.n	8000c8e <__sflush_r+0x1a>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d30:	81a3      	strh	r3, [r4, #12]
 8000d32:	e7ad      	b.n	8000c90 <__sflush_r+0x1c>
 8000d34:	690f      	ldr	r7, [r1, #16]
 8000d36:	2f00      	cmp	r7, #0
 8000d38:	d0a9      	beq.n	8000c8e <__sflush_r+0x1a>
 8000d3a:	0793      	lsls	r3, r2, #30
 8000d3c:	680e      	ldr	r6, [r1, #0]
 8000d3e:	bf08      	it	eq
 8000d40:	694b      	ldreq	r3, [r1, #20]
 8000d42:	600f      	str	r7, [r1, #0]
 8000d44:	bf18      	it	ne
 8000d46:	2300      	movne	r3, #0
 8000d48:	eba6 0807 	sub.w	r8, r6, r7
 8000d4c:	608b      	str	r3, [r1, #8]
 8000d4e:	f1b8 0f00 	cmp.w	r8, #0
 8000d52:	dd9c      	ble.n	8000c8e <__sflush_r+0x1a>
 8000d54:	6a21      	ldr	r1, [r4, #32]
 8000d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d58:	4643      	mov	r3, r8
 8000d5a:	463a      	mov	r2, r7
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	47b0      	blx	r6
 8000d60:	2800      	cmp	r0, #0
 8000d62:	dc06      	bgt.n	8000d72 <__sflush_r+0xfe>
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6a:	81a3      	strh	r3, [r4, #12]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	e78e      	b.n	8000c90 <__sflush_r+0x1c>
 8000d72:	4407      	add	r7, r0
 8000d74:	eba8 0800 	sub.w	r8, r8, r0
 8000d78:	e7e9      	b.n	8000d4e <__sflush_r+0xda>
 8000d7a:	bf00      	nop
 8000d7c:	20400001 	.word	0x20400001

08000d80 <_fflush_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	690b      	ldr	r3, [r1, #16]
 8000d84:	4605      	mov	r5, r0
 8000d86:	460c      	mov	r4, r1
 8000d88:	b913      	cbnz	r3, 8000d90 <_fflush_r+0x10>
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
 8000d90:	b118      	cbz	r0, 8000d9a <_fflush_r+0x1a>
 8000d92:	6983      	ldr	r3, [r0, #24]
 8000d94:	b90b      	cbnz	r3, 8000d9a <_fflush_r+0x1a>
 8000d96:	f000 f887 	bl	8000ea8 <__sinit>
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <_fflush_r+0x6c>)
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	d11b      	bne.n	8000dd8 <_fflush_r+0x58>
 8000da0:	686c      	ldr	r4, [r5, #4]
 8000da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0ef      	beq.n	8000d8a <_fflush_r+0xa>
 8000daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000dac:	07d0      	lsls	r0, r2, #31
 8000dae:	d404      	bmi.n	8000dba <_fflush_r+0x3a>
 8000db0:	0599      	lsls	r1, r3, #22
 8000db2:	d402      	bmi.n	8000dba <_fflush_r+0x3a>
 8000db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000db6:	f000 f915 	bl	8000fe4 <__retarget_lock_acquire_recursive>
 8000dba:	4628      	mov	r0, r5
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	f7ff ff59 	bl	8000c74 <__sflush_r>
 8000dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dc4:	07da      	lsls	r2, r3, #31
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	d4e0      	bmi.n	8000d8c <_fflush_r+0xc>
 8000dca:	89a3      	ldrh	r3, [r4, #12]
 8000dcc:	059b      	lsls	r3, r3, #22
 8000dce:	d4dd      	bmi.n	8000d8c <_fflush_r+0xc>
 8000dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dd2:	f000 f908 	bl	8000fe6 <__retarget_lock_release_recursive>
 8000dd6:	e7d9      	b.n	8000d8c <_fflush_r+0xc>
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <_fflush_r+0x70>)
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	d101      	bne.n	8000de2 <_fflush_r+0x62>
 8000dde:	68ac      	ldr	r4, [r5, #8]
 8000de0:	e7df      	b.n	8000da2 <_fflush_r+0x22>
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <_fflush_r+0x74>)
 8000de4:	429c      	cmp	r4, r3
 8000de6:	bf08      	it	eq
 8000de8:	68ec      	ldreq	r4, [r5, #12]
 8000dea:	e7da      	b.n	8000da2 <_fflush_r+0x22>
 8000dec:	08001500 	.word	0x08001500
 8000df0:	08001520 	.word	0x08001520
 8000df4:	080014e0 	.word	0x080014e0

08000df8 <std>:
 8000df8:	2300      	movs	r3, #0
 8000dfa:	b510      	push	{r4, lr}
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8000e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e06:	6083      	str	r3, [r0, #8]
 8000e08:	8181      	strh	r1, [r0, #12]
 8000e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8000e0c:	81c2      	strh	r2, [r0, #14]
 8000e0e:	6183      	str	r3, [r0, #24]
 8000e10:	4619      	mov	r1, r3
 8000e12:	2208      	movs	r2, #8
 8000e14:	305c      	adds	r0, #92	; 0x5c
 8000e16:	f7ff fdef 	bl	80009f8 <memset>
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <std+0x38>)
 8000e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <std+0x3c>)
 8000e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <std+0x40>)
 8000e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <std+0x44>)
 8000e28:	6224      	str	r4, [r4, #32]
 8000e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e2c:	bd10      	pop	{r4, pc}
 8000e2e:	bf00      	nop
 8000e30:	08001295 	.word	0x08001295
 8000e34:	080012b7 	.word	0x080012b7
 8000e38:	080012ef 	.word	0x080012ef
 8000e3c:	08001313 	.word	0x08001313

08000e40 <_cleanup_r>:
 8000e40:	4901      	ldr	r1, [pc, #4]	; (8000e48 <_cleanup_r+0x8>)
 8000e42:	f000 b8af 	b.w	8000fa4 <_fwalk_reent>
 8000e46:	bf00      	nop
 8000e48:	08000d81 	.word	0x08000d81

08000e4c <__sfmoreglue>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	2268      	movs	r2, #104	; 0x68
 8000e50:	1e4d      	subs	r5, r1, #1
 8000e52:	4355      	muls	r5, r2
 8000e54:	460e      	mov	r6, r1
 8000e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e5a:	f000 f997 	bl	800118c <_malloc_r>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	b140      	cbz	r0, 8000e74 <__sfmoreglue+0x28>
 8000e62:	2100      	movs	r1, #0
 8000e64:	e9c0 1600 	strd	r1, r6, [r0]
 8000e68:	300c      	adds	r0, #12
 8000e6a:	60a0      	str	r0, [r4, #8]
 8000e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e70:	f7ff fdc2 	bl	80009f8 <memset>
 8000e74:	4620      	mov	r0, r4
 8000e76:	bd70      	pop	{r4, r5, r6, pc}

08000e78 <__sfp_lock_acquire>:
 8000e78:	4801      	ldr	r0, [pc, #4]	; (8000e80 <__sfp_lock_acquire+0x8>)
 8000e7a:	f000 b8b3 	b.w	8000fe4 <__retarget_lock_acquire_recursive>
 8000e7e:	bf00      	nop
 8000e80:	200000dd 	.word	0x200000dd

08000e84 <__sfp_lock_release>:
 8000e84:	4801      	ldr	r0, [pc, #4]	; (8000e8c <__sfp_lock_release+0x8>)
 8000e86:	f000 b8ae 	b.w	8000fe6 <__retarget_lock_release_recursive>
 8000e8a:	bf00      	nop
 8000e8c:	200000dd 	.word	0x200000dd

08000e90 <__sinit_lock_acquire>:
 8000e90:	4801      	ldr	r0, [pc, #4]	; (8000e98 <__sinit_lock_acquire+0x8>)
 8000e92:	f000 b8a7 	b.w	8000fe4 <__retarget_lock_acquire_recursive>
 8000e96:	bf00      	nop
 8000e98:	200000de 	.word	0x200000de

08000e9c <__sinit_lock_release>:
 8000e9c:	4801      	ldr	r0, [pc, #4]	; (8000ea4 <__sinit_lock_release+0x8>)
 8000e9e:	f000 b8a2 	b.w	8000fe6 <__retarget_lock_release_recursive>
 8000ea2:	bf00      	nop
 8000ea4:	200000de 	.word	0x200000de

08000ea8 <__sinit>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f7ff fff0 	bl	8000e90 <__sinit_lock_acquire>
 8000eb0:	69a3      	ldr	r3, [r4, #24]
 8000eb2:	b11b      	cbz	r3, 8000ebc <__sinit+0x14>
 8000eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000eb8:	f7ff bff0 	b.w	8000e9c <__sinit_lock_release>
 8000ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <__sinit+0x68>)
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <__sinit+0x6c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eca:	42a3      	cmp	r3, r4
 8000ecc:	bf04      	itt	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	61a3      	streq	r3, [r4, #24]
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f000 f820 	bl	8000f18 <__sfp>
 8000ed8:	6060      	str	r0, [r4, #4]
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 f81c 	bl	8000f18 <__sfp>
 8000ee0:	60a0      	str	r0, [r4, #8]
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f000 f818 	bl	8000f18 <__sfp>
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60e0      	str	r0, [r4, #12]
 8000eec:	2104      	movs	r1, #4
 8000eee:	6860      	ldr	r0, [r4, #4]
 8000ef0:	f7ff ff82 	bl	8000df8 <std>
 8000ef4:	68a0      	ldr	r0, [r4, #8]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2109      	movs	r1, #9
 8000efa:	f7ff ff7d 	bl	8000df8 <std>
 8000efe:	68e0      	ldr	r0, [r4, #12]
 8000f00:	2202      	movs	r2, #2
 8000f02:	2112      	movs	r1, #18
 8000f04:	f7ff ff78 	bl	8000df8 <std>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61a3      	str	r3, [r4, #24]
 8000f0c:	e7d2      	b.n	8000eb4 <__sinit+0xc>
 8000f0e:	bf00      	nop
 8000f10:	080014dc 	.word	0x080014dc
 8000f14:	08000e41 	.word	0x08000e41

08000f18 <__sfp>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	4607      	mov	r7, r0
 8000f1c:	f7ff ffac 	bl	8000e78 <__sfp_lock_acquire>
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <__sfp+0x84>)
 8000f22:	681e      	ldr	r6, [r3, #0]
 8000f24:	69b3      	ldr	r3, [r6, #24]
 8000f26:	b913      	cbnz	r3, 8000f2e <__sfp+0x16>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f7ff ffbd 	bl	8000ea8 <__sinit>
 8000f2e:	3648      	adds	r6, #72	; 0x48
 8000f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	d503      	bpl.n	8000f40 <__sfp+0x28>
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	b30b      	cbz	r3, 8000f80 <__sfp+0x68>
 8000f3c:	6836      	ldr	r6, [r6, #0]
 8000f3e:	e7f7      	b.n	8000f30 <__sfp+0x18>
 8000f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f44:	b9d5      	cbnz	r5, 8000f7c <__sfp+0x64>
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <__sfp+0x88>)
 8000f48:	60e3      	str	r3, [r4, #12]
 8000f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8000f50:	f000 f847 	bl	8000fe2 <__retarget_lock_init_recursive>
 8000f54:	f7ff ff96 	bl	8000e84 <__sfp_lock_release>
 8000f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f60:	6025      	str	r5, [r4, #0]
 8000f62:	61a5      	str	r5, [r4, #24]
 8000f64:	2208      	movs	r2, #8
 8000f66:	4629      	mov	r1, r5
 8000f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f6c:	f7ff fd44 	bl	80009f8 <memset>
 8000f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f78:	4620      	mov	r0, r4
 8000f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f7c:	3468      	adds	r4, #104	; 0x68
 8000f7e:	e7d9      	b.n	8000f34 <__sfp+0x1c>
 8000f80:	2104      	movs	r1, #4
 8000f82:	4638      	mov	r0, r7
 8000f84:	f7ff ff62 	bl	8000e4c <__sfmoreglue>
 8000f88:	4604      	mov	r4, r0
 8000f8a:	6030      	str	r0, [r6, #0]
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d1d5      	bne.n	8000f3c <__sfp+0x24>
 8000f90:	f7ff ff78 	bl	8000e84 <__sfp_lock_release>
 8000f94:	230c      	movs	r3, #12
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	e7ee      	b.n	8000f78 <__sfp+0x60>
 8000f9a:	bf00      	nop
 8000f9c:	080014dc 	.word	0x080014dc
 8000fa0:	ffff0001 	.word	0xffff0001

08000fa4 <_fwalk_reent>:
 8000fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fa8:	4606      	mov	r6, r0
 8000faa:	4688      	mov	r8, r1
 8000fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fb0:	2700      	movs	r7, #0
 8000fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8000fba:	d505      	bpl.n	8000fc8 <_fwalk_reent+0x24>
 8000fbc:	6824      	ldr	r4, [r4, #0]
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d1f7      	bne.n	8000fb2 <_fwalk_reent+0xe>
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fc8:	89ab      	ldrh	r3, [r5, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d907      	bls.n	8000fde <_fwalk_reent+0x3a>
 8000fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	d003      	beq.n	8000fde <_fwalk_reent+0x3a>
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4630      	mov	r0, r6
 8000fda:	47c0      	blx	r8
 8000fdc:	4307      	orrs	r7, r0
 8000fde:	3568      	adds	r5, #104	; 0x68
 8000fe0:	e7e9      	b.n	8000fb6 <_fwalk_reent+0x12>

08000fe2 <__retarget_lock_init_recursive>:
 8000fe2:	4770      	bx	lr

08000fe4 <__retarget_lock_acquire_recursive>:
 8000fe4:	4770      	bx	lr

08000fe6 <__retarget_lock_release_recursive>:
 8000fe6:	4770      	bx	lr

08000fe8 <__swhatbuf_r>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	460e      	mov	r6, r1
 8000fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	da08      	bge.n	800100c <__swhatbuf_r+0x24>
 8000ffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	602a      	str	r2, [r5, #0]
 8001002:	061a      	lsls	r2, r3, #24
 8001004:	d410      	bmi.n	8001028 <__swhatbuf_r+0x40>
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	e00e      	b.n	800102a <__swhatbuf_r+0x42>
 800100c:	466a      	mov	r2, sp
 800100e:	f000 f9a7 	bl	8001360 <_fstat_r>
 8001012:	2800      	cmp	r0, #0
 8001014:	dbf1      	blt.n	8000ffa <__swhatbuf_r+0x12>
 8001016:	9a01      	ldr	r2, [sp, #4]
 8001018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800101c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001020:	425a      	negs	r2, r3
 8001022:	415a      	adcs	r2, r3
 8001024:	602a      	str	r2, [r5, #0]
 8001026:	e7ee      	b.n	8001006 <__swhatbuf_r+0x1e>
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	2000      	movs	r0, #0
 800102c:	6023      	str	r3, [r4, #0]
 800102e:	b016      	add	sp, #88	; 0x58
 8001030:	bd70      	pop	{r4, r5, r6, pc}
	...

08001034 <__smakebuf_r>:
 8001034:	898b      	ldrh	r3, [r1, #12]
 8001036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001038:	079d      	lsls	r5, r3, #30
 800103a:	4606      	mov	r6, r0
 800103c:	460c      	mov	r4, r1
 800103e:	d507      	bpl.n	8001050 <__smakebuf_r+0x1c>
 8001040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001044:	6023      	str	r3, [r4, #0]
 8001046:	6123      	str	r3, [r4, #16]
 8001048:	2301      	movs	r3, #1
 800104a:	6163      	str	r3, [r4, #20]
 800104c:	b002      	add	sp, #8
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	ab01      	add	r3, sp, #4
 8001052:	466a      	mov	r2, sp
 8001054:	f7ff ffc8 	bl	8000fe8 <__swhatbuf_r>
 8001058:	9900      	ldr	r1, [sp, #0]
 800105a:	4605      	mov	r5, r0
 800105c:	4630      	mov	r0, r6
 800105e:	f000 f895 	bl	800118c <_malloc_r>
 8001062:	b948      	cbnz	r0, 8001078 <__smakebuf_r+0x44>
 8001064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001068:	059a      	lsls	r2, r3, #22
 800106a:	d4ef      	bmi.n	800104c <__smakebuf_r+0x18>
 800106c:	f023 0303 	bic.w	r3, r3, #3
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	81a3      	strh	r3, [r4, #12]
 8001076:	e7e3      	b.n	8001040 <__smakebuf_r+0xc>
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <__smakebuf_r+0x7c>)
 800107a:	62b3      	str	r3, [r6, #40]	; 0x28
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	6020      	str	r0, [r4, #0]
 8001080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001084:	81a3      	strh	r3, [r4, #12]
 8001086:	9b00      	ldr	r3, [sp, #0]
 8001088:	6163      	str	r3, [r4, #20]
 800108a:	9b01      	ldr	r3, [sp, #4]
 800108c:	6120      	str	r0, [r4, #16]
 800108e:	b15b      	cbz	r3, 80010a8 <__smakebuf_r+0x74>
 8001090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001094:	4630      	mov	r0, r6
 8001096:	f000 f975 	bl	8001384 <_isatty_r>
 800109a:	b128      	cbz	r0, 80010a8 <__smakebuf_r+0x74>
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	81a3      	strh	r3, [r4, #12]
 80010a8:	89a0      	ldrh	r0, [r4, #12]
 80010aa:	4305      	orrs	r5, r0
 80010ac:	81a5      	strh	r5, [r4, #12]
 80010ae:	e7cd      	b.n	800104c <__smakebuf_r+0x18>
 80010b0:	08000e41 	.word	0x08000e41

080010b4 <_free_r>:
 80010b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d044      	beq.n	8001144 <_free_r+0x90>
 80010ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010be:	9001      	str	r0, [sp, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f1a1 0404 	sub.w	r4, r1, #4
 80010c6:	bfb8      	it	lt
 80010c8:	18e4      	addlt	r4, r4, r3
 80010ca:	f000 f97d 	bl	80013c8 <__malloc_lock>
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <_free_r+0x94>)
 80010d0:	9801      	ldr	r0, [sp, #4]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	b933      	cbnz	r3, 80010e4 <_free_r+0x30>
 80010d6:	6063      	str	r3, [r4, #4]
 80010d8:	6014      	str	r4, [r2, #0]
 80010da:	b003      	add	sp, #12
 80010dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010e0:	f000 b978 	b.w	80013d4 <__malloc_unlock>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d908      	bls.n	80010fa <_free_r+0x46>
 80010e8:	6825      	ldr	r5, [r4, #0]
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	428b      	cmp	r3, r1
 80010ee:	bf01      	itttt	eq
 80010f0:	6819      	ldreq	r1, [r3, #0]
 80010f2:	685b      	ldreq	r3, [r3, #4]
 80010f4:	1949      	addeq	r1, r1, r5
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	e7ed      	b.n	80010d6 <_free_r+0x22>
 80010fa:	461a      	mov	r2, r3
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b10b      	cbz	r3, 8001104 <_free_r+0x50>
 8001100:	42a3      	cmp	r3, r4
 8001102:	d9fa      	bls.n	80010fa <_free_r+0x46>
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	1855      	adds	r5, r2, r1
 8001108:	42a5      	cmp	r5, r4
 800110a:	d10b      	bne.n	8001124 <_free_r+0x70>
 800110c:	6824      	ldr	r4, [r4, #0]
 800110e:	4421      	add	r1, r4
 8001110:	1854      	adds	r4, r2, r1
 8001112:	42a3      	cmp	r3, r4
 8001114:	6011      	str	r1, [r2, #0]
 8001116:	d1e0      	bne.n	80010da <_free_r+0x26>
 8001118:	681c      	ldr	r4, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6053      	str	r3, [r2, #4]
 800111e:	4421      	add	r1, r4
 8001120:	6011      	str	r1, [r2, #0]
 8001122:	e7da      	b.n	80010da <_free_r+0x26>
 8001124:	d902      	bls.n	800112c <_free_r+0x78>
 8001126:	230c      	movs	r3, #12
 8001128:	6003      	str	r3, [r0, #0]
 800112a:	e7d6      	b.n	80010da <_free_r+0x26>
 800112c:	6825      	ldr	r5, [r4, #0]
 800112e:	1961      	adds	r1, r4, r5
 8001130:	428b      	cmp	r3, r1
 8001132:	bf04      	itt	eq
 8001134:	6819      	ldreq	r1, [r3, #0]
 8001136:	685b      	ldreq	r3, [r3, #4]
 8001138:	6063      	str	r3, [r4, #4]
 800113a:	bf04      	itt	eq
 800113c:	1949      	addeq	r1, r1, r5
 800113e:	6021      	streq	r1, [r4, #0]
 8001140:	6054      	str	r4, [r2, #4]
 8001142:	e7ca      	b.n	80010da <_free_r+0x26>
 8001144:	b003      	add	sp, #12
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	200000e0 	.word	0x200000e0

0800114c <sbrk_aligned>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	4e0e      	ldr	r6, [pc, #56]	; (8001188 <sbrk_aligned+0x3c>)
 8001150:	460c      	mov	r4, r1
 8001152:	6831      	ldr	r1, [r6, #0]
 8001154:	4605      	mov	r5, r0
 8001156:	b911      	cbnz	r1, 800115e <sbrk_aligned+0x12>
 8001158:	f000 f88c 	bl	8001274 <_sbrk_r>
 800115c:	6030      	str	r0, [r6, #0]
 800115e:	4621      	mov	r1, r4
 8001160:	4628      	mov	r0, r5
 8001162:	f000 f887 	bl	8001274 <_sbrk_r>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	d00a      	beq.n	8001180 <sbrk_aligned+0x34>
 800116a:	1cc4      	adds	r4, r0, #3
 800116c:	f024 0403 	bic.w	r4, r4, #3
 8001170:	42a0      	cmp	r0, r4
 8001172:	d007      	beq.n	8001184 <sbrk_aligned+0x38>
 8001174:	1a21      	subs	r1, r4, r0
 8001176:	4628      	mov	r0, r5
 8001178:	f000 f87c 	bl	8001274 <_sbrk_r>
 800117c:	3001      	adds	r0, #1
 800117e:	d101      	bne.n	8001184 <sbrk_aligned+0x38>
 8001180:	f04f 34ff 	mov.w	r4, #4294967295
 8001184:	4620      	mov	r0, r4
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	200000e4 	.word	0x200000e4

0800118c <_malloc_r>:
 800118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	1ccd      	adds	r5, r1, #3
 8001192:	f025 0503 	bic.w	r5, r5, #3
 8001196:	3508      	adds	r5, #8
 8001198:	2d0c      	cmp	r5, #12
 800119a:	bf38      	it	cc
 800119c:	250c      	movcc	r5, #12
 800119e:	2d00      	cmp	r5, #0
 80011a0:	4607      	mov	r7, r0
 80011a2:	db01      	blt.n	80011a8 <_malloc_r+0x1c>
 80011a4:	42a9      	cmp	r1, r5
 80011a6:	d905      	bls.n	80011b4 <_malloc_r+0x28>
 80011a8:	230c      	movs	r3, #12
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	2600      	movs	r6, #0
 80011ae:	4630      	mov	r0, r6
 80011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b4:	4e2e      	ldr	r6, [pc, #184]	; (8001270 <_malloc_r+0xe4>)
 80011b6:	f000 f907 	bl	80013c8 <__malloc_lock>
 80011ba:	6833      	ldr	r3, [r6, #0]
 80011bc:	461c      	mov	r4, r3
 80011be:	bb34      	cbnz	r4, 800120e <_malloc_r+0x82>
 80011c0:	4629      	mov	r1, r5
 80011c2:	4638      	mov	r0, r7
 80011c4:	f7ff ffc2 	bl	800114c <sbrk_aligned>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	4604      	mov	r4, r0
 80011cc:	d14d      	bne.n	800126a <_malloc_r+0xde>
 80011ce:	6834      	ldr	r4, [r6, #0]
 80011d0:	4626      	mov	r6, r4
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d140      	bne.n	8001258 <_malloc_r+0xcc>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	4631      	mov	r1, r6
 80011da:	4638      	mov	r0, r7
 80011dc:	eb04 0803 	add.w	r8, r4, r3
 80011e0:	f000 f848 	bl	8001274 <_sbrk_r>
 80011e4:	4580      	cmp	r8, r0
 80011e6:	d13a      	bne.n	800125e <_malloc_r+0xd2>
 80011e8:	6821      	ldr	r1, [r4, #0]
 80011ea:	3503      	adds	r5, #3
 80011ec:	1a6d      	subs	r5, r5, r1
 80011ee:	f025 0503 	bic.w	r5, r5, #3
 80011f2:	3508      	adds	r5, #8
 80011f4:	2d0c      	cmp	r5, #12
 80011f6:	bf38      	it	cc
 80011f8:	250c      	movcc	r5, #12
 80011fa:	4629      	mov	r1, r5
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff ffa5 	bl	800114c <sbrk_aligned>
 8001202:	3001      	adds	r0, #1
 8001204:	d02b      	beq.n	800125e <_malloc_r+0xd2>
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	442b      	add	r3, r5
 800120a:	6023      	str	r3, [r4, #0]
 800120c:	e00e      	b.n	800122c <_malloc_r+0xa0>
 800120e:	6822      	ldr	r2, [r4, #0]
 8001210:	1b52      	subs	r2, r2, r5
 8001212:	d41e      	bmi.n	8001252 <_malloc_r+0xc6>
 8001214:	2a0b      	cmp	r2, #11
 8001216:	d916      	bls.n	8001246 <_malloc_r+0xba>
 8001218:	1961      	adds	r1, r4, r5
 800121a:	42a3      	cmp	r3, r4
 800121c:	6025      	str	r5, [r4, #0]
 800121e:	bf18      	it	ne
 8001220:	6059      	strne	r1, [r3, #4]
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	bf08      	it	eq
 8001226:	6031      	streq	r1, [r6, #0]
 8001228:	5162      	str	r2, [r4, r5]
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	4638      	mov	r0, r7
 800122e:	f104 060b 	add.w	r6, r4, #11
 8001232:	f000 f8cf 	bl	80013d4 <__malloc_unlock>
 8001236:	f026 0607 	bic.w	r6, r6, #7
 800123a:	1d23      	adds	r3, r4, #4
 800123c:	1af2      	subs	r2, r6, r3
 800123e:	d0b6      	beq.n	80011ae <_malloc_r+0x22>
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	50a3      	str	r3, [r4, r2]
 8001244:	e7b3      	b.n	80011ae <_malloc_r+0x22>
 8001246:	6862      	ldr	r2, [r4, #4]
 8001248:	42a3      	cmp	r3, r4
 800124a:	bf0c      	ite	eq
 800124c:	6032      	streq	r2, [r6, #0]
 800124e:	605a      	strne	r2, [r3, #4]
 8001250:	e7ec      	b.n	800122c <_malloc_r+0xa0>
 8001252:	4623      	mov	r3, r4
 8001254:	6864      	ldr	r4, [r4, #4]
 8001256:	e7b2      	b.n	80011be <_malloc_r+0x32>
 8001258:	4634      	mov	r4, r6
 800125a:	6876      	ldr	r6, [r6, #4]
 800125c:	e7b9      	b.n	80011d2 <_malloc_r+0x46>
 800125e:	230c      	movs	r3, #12
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4638      	mov	r0, r7
 8001264:	f000 f8b6 	bl	80013d4 <__malloc_unlock>
 8001268:	e7a1      	b.n	80011ae <_malloc_r+0x22>
 800126a:	6025      	str	r5, [r4, #0]
 800126c:	e7de      	b.n	800122c <_malloc_r+0xa0>
 800126e:	bf00      	nop
 8001270:	200000e0 	.word	0x200000e0

08001274 <_sbrk_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4d06      	ldr	r5, [pc, #24]	; (8001290 <_sbrk_r+0x1c>)
 8001278:	2300      	movs	r3, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4608      	mov	r0, r1
 800127e:	602b      	str	r3, [r5, #0]
 8001280:	f7ff fb30 	bl	80008e4 <_sbrk>
 8001284:	1c43      	adds	r3, r0, #1
 8001286:	d102      	bne.n	800128e <_sbrk_r+0x1a>
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	b103      	cbz	r3, 800128e <_sbrk_r+0x1a>
 800128c:	6023      	str	r3, [r4, #0]
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	200000e8 	.word	0x200000e8

08001294 <__sread>:
 8001294:	b510      	push	{r4, lr}
 8001296:	460c      	mov	r4, r1
 8001298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129c:	f000 f8a0 	bl	80013e0 <_read_r>
 80012a0:	2800      	cmp	r0, #0
 80012a2:	bfab      	itete	ge
 80012a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012a6:	89a3      	ldrhlt	r3, [r4, #12]
 80012a8:	181b      	addge	r3, r3, r0
 80012aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012ae:	bfac      	ite	ge
 80012b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80012b2:	81a3      	strhlt	r3, [r4, #12]
 80012b4:	bd10      	pop	{r4, pc}

080012b6 <__swrite>:
 80012b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ba:	461f      	mov	r7, r3
 80012bc:	898b      	ldrh	r3, [r1, #12]
 80012be:	05db      	lsls	r3, r3, #23
 80012c0:	4605      	mov	r5, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4616      	mov	r6, r2
 80012c6:	d505      	bpl.n	80012d4 <__swrite+0x1e>
 80012c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012cc:	2302      	movs	r3, #2
 80012ce:	2200      	movs	r2, #0
 80012d0:	f000 f868 	bl	80013a4 <_lseek_r>
 80012d4:	89a3      	ldrh	r3, [r4, #12]
 80012d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012de:	81a3      	strh	r3, [r4, #12]
 80012e0:	4632      	mov	r2, r6
 80012e2:	463b      	mov	r3, r7
 80012e4:	4628      	mov	r0, r5
 80012e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012ea:	f000 b817 	b.w	800131c <_write_r>

080012ee <__sseek>:
 80012ee:	b510      	push	{r4, lr}
 80012f0:	460c      	mov	r4, r1
 80012f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f6:	f000 f855 	bl	80013a4 <_lseek_r>
 80012fa:	1c43      	adds	r3, r0, #1
 80012fc:	89a3      	ldrh	r3, [r4, #12]
 80012fe:	bf15      	itete	ne
 8001300:	6560      	strne	r0, [r4, #84]	; 0x54
 8001302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800130a:	81a3      	strheq	r3, [r4, #12]
 800130c:	bf18      	it	ne
 800130e:	81a3      	strhne	r3, [r4, #12]
 8001310:	bd10      	pop	{r4, pc}

08001312 <__sclose>:
 8001312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001316:	f000 b813 	b.w	8001340 <_close_r>
	...

0800131c <_write_r>:
 800131c:	b538      	push	{r3, r4, r5, lr}
 800131e:	4d07      	ldr	r5, [pc, #28]	; (800133c <_write_r+0x20>)
 8001320:	4604      	mov	r4, r0
 8001322:	4608      	mov	r0, r1
 8001324:	4611      	mov	r1, r2
 8001326:	2200      	movs	r2, #0
 8001328:	602a      	str	r2, [r5, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	f7ff fa8a 	bl	8000844 <_write>
 8001330:	1c43      	adds	r3, r0, #1
 8001332:	d102      	bne.n	800133a <_write_r+0x1e>
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	b103      	cbz	r3, 800133a <_write_r+0x1e>
 8001338:	6023      	str	r3, [r4, #0]
 800133a:	bd38      	pop	{r3, r4, r5, pc}
 800133c:	200000e8 	.word	0x200000e8

08001340 <_close_r>:
 8001340:	b538      	push	{r3, r4, r5, lr}
 8001342:	4d06      	ldr	r5, [pc, #24]	; (800135c <_close_r+0x1c>)
 8001344:	2300      	movs	r3, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	602b      	str	r3, [r5, #0]
 800134c:	f7ff fa96 	bl	800087c <_close>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	d102      	bne.n	800135a <_close_r+0x1a>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b103      	cbz	r3, 800135a <_close_r+0x1a>
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	200000e8 	.word	0x200000e8

08001360 <_fstat_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d07      	ldr	r5, [pc, #28]	; (8001380 <_fstat_r+0x20>)
 8001364:	2300      	movs	r3, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	602b      	str	r3, [r5, #0]
 800136e:	f7ff fa91 	bl	8000894 <_fstat>
 8001372:	1c43      	adds	r3, r0, #1
 8001374:	d102      	bne.n	800137c <_fstat_r+0x1c>
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	b103      	cbz	r3, 800137c <_fstat_r+0x1c>
 800137a:	6023      	str	r3, [r4, #0]
 800137c:	bd38      	pop	{r3, r4, r5, pc}
 800137e:	bf00      	nop
 8001380:	200000e8 	.word	0x200000e8

08001384 <_isatty_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d06      	ldr	r5, [pc, #24]	; (80013a0 <_isatty_r+0x1c>)
 8001388:	2300      	movs	r3, #0
 800138a:	4604      	mov	r4, r0
 800138c:	4608      	mov	r0, r1
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	f7ff fa90 	bl	80008b4 <_isatty>
 8001394:	1c43      	adds	r3, r0, #1
 8001396:	d102      	bne.n	800139e <_isatty_r+0x1a>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	b103      	cbz	r3, 800139e <_isatty_r+0x1a>
 800139c:	6023      	str	r3, [r4, #0]
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	200000e8 	.word	0x200000e8

080013a4 <_lseek_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d07      	ldr	r5, [pc, #28]	; (80013c4 <_lseek_r+0x20>)
 80013a8:	4604      	mov	r4, r0
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	2200      	movs	r2, #0
 80013b0:	602a      	str	r2, [r5, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f7ff fa89 	bl	80008ca <_lseek>
 80013b8:	1c43      	adds	r3, r0, #1
 80013ba:	d102      	bne.n	80013c2 <_lseek_r+0x1e>
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	b103      	cbz	r3, 80013c2 <_lseek_r+0x1e>
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
 80013c4:	200000e8 	.word	0x200000e8

080013c8 <__malloc_lock>:
 80013c8:	4801      	ldr	r0, [pc, #4]	; (80013d0 <__malloc_lock+0x8>)
 80013ca:	f7ff be0b 	b.w	8000fe4 <__retarget_lock_acquire_recursive>
 80013ce:	bf00      	nop
 80013d0:	200000dc 	.word	0x200000dc

080013d4 <__malloc_unlock>:
 80013d4:	4801      	ldr	r0, [pc, #4]	; (80013dc <__malloc_unlock+0x8>)
 80013d6:	f7ff be06 	b.w	8000fe6 <__retarget_lock_release_recursive>
 80013da:	bf00      	nop
 80013dc:	200000dc 	.word	0x200000dc

080013e0 <_read_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4d07      	ldr	r5, [pc, #28]	; (8001400 <_read_r+0x20>)
 80013e4:	4604      	mov	r4, r0
 80013e6:	4608      	mov	r0, r1
 80013e8:	4611      	mov	r1, r2
 80013ea:	2200      	movs	r2, #0
 80013ec:	602a      	str	r2, [r5, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	f7ff fa0b 	bl	800080a <_read>
 80013f4:	1c43      	adds	r3, r0, #1
 80013f6:	d102      	bne.n	80013fe <_read_r+0x1e>
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	b103      	cbz	r3, 80013fe <_read_r+0x1e>
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	bd38      	pop	{r3, r4, r5, pc}
 8001400:	200000e8 	.word	0x200000e8

08001404 <_init>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr

08001410 <_fini>:
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	bf00      	nop
 8001414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001416:	bc08      	pop	{r3}
 8001418:	469e      	mov	lr, r3
 800141a:	4770      	bx	lr
